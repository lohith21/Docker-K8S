##### Setting Up 3 Node Kubernetes Cluster (1 master and 2 worker nodes)

In the following demo will be setting up 3 Node Kubernetes Cluster ( 1 Master & 2 Workers )
For this demo will be required to have following tools installed.
1. Virtual Box
2. Vagrant
3. Cmder / Git Bash

First clone this repository on your windows machine.
git clone https://github.com/amitvashisttech/docker-kubernetes-sf-11-Feb-2022.git


Now provision three virtual machines with following commands:
cd docker-kubernetes-sf-11-Feb-2022/02-K8s/00-Setup
vagrant.exe up

vagrant.exe status
Current machine states:

master                    running (virtualbox)
worker1                   running (virtualbox)
worker2                   running (virtualbox)


Login to master node & clone the repo after that execute install-kubernetes.sh.
Note :

1. Check your master machines ip address & update the same in install-kubernetes.sh (--apiserver-advertise-address="YourMasterIP")
2. Please copy the joining token which is generated by the execution script.
vagrant.exe ssh master
sudo su - 
git clone To https://github.com/amitvashisttech/docker-kubernetes-sf-11-Feb-2022.git
cd docker-kubernetes-sf-11-Feb-2022/02-K8s/00-Setup
sh install-k8s-master-node.sh


---
Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 172.31.0.100:6443 --token mr74fn.m4upjko4cfm5uwmz --discovery-token-ca-cert-hash sha256:cb406434a7f06d213eabfce7d6980b3948525d13e1c25b9f061831039bf49f52


---
In order to intract with kubernetes cluster run the following commands
root@master:~# mkdir -p $HOME/.kube
root@master:~# sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
root@master:~# sudo chown $(id -u):$(id -g) $HOME/.kube/config
root@k8s-master:~# kubectl get nodes 
NAME         STATUS   ROLES    AGE    VERSION
k8s-master   Ready    master   5m6s   v1.18.0


In parallel Login to both the nodes /workers & clone the repo after that execute install-node.sh.
vagrant.exe ssh woker1
sudo su - 
git clone https://github.com/amitvashisttech/docker-kubernetes-sf-11-Feb-2022.git
cd docker-kubernetes-sf-11-Feb-2022/02-K8s/00-Setup
sh install-k8s-worker-node.sh


Now apply the joining token on both the workers
kubeadm join 172.31.0.100:6443 --token mr74fn.m4upjko4cfm5uwmz --discovery-token-ca-cert-hash sha256:cb406434a7f06d213eabfce7d6980b3948525d13e1c25b9f061831039bf49f52


Let check the kubernetes cluster nodes status & details
NAME      STATUS   ROLES                  AGE     VERSION
master    Ready    control-plane,master   14m     v1.21.0
worker1   Ready    <none>                 3m54s   v1.21.0
worker2   Ready    <none>                 2m39s   v1.21.0


root@master:~# kubectl get nodes -o wide
NAME      STATUS   ROLES                  AGE     VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
master    Ready    control-plane,master   14m     v1.21.0   172.31.0.100   <none>        Ubuntu 16.04.7 LTS   4.4.0-210-generic   docker://17.3.3
worker1   Ready    <none>                 4m27s   v1.21.0   172.31.0.101   <none>        Ubuntu 16.04.7 LTS   4.4.0-210-generic   docker://17.3.3
worker2   Ready    <none>                 3m12s   v1.21.0   172.31.0.102   <none>        Ubuntu 16.04.7 LTS   4.4.0-210-generic   docker://17.3.3
root@master:~#


#######################  01 Creating First App ##############

Creating out First App
Check the health of Cluster
kubectl get nodes 


Deploy Nginx App
kubectl run hello-k8s --image=nginx --port=80

Check the status of PODs
kubectl get pods 
kubectl describe pods hello-k8s


Let's Deploy our newly built PythonWeb App.
kubectl run mypythonwebapp --image=amitvashist7/mypywebapp:v3 --port=8081
kubectl get pods
NAME             READY   STATUS    RESTARTS   AGE
hello-k8s        1/1     Running   0          6m22s
mypythonwebapp   1/1     Running   0          4m58s

############################## 02 ETCD ########################

K8s Datastore - ETCD
Check the status of ETCD
kubectl get pods -n kube-system | grep -i  etcd

Let explore ETCD POD
kubectl exec -it etcd-kmaster -n kube-system   -- /bin/sh

Check the ETCD Status

# ETCDCTL_API=3 etcdctl --cacert="/etc/kubernetes/pki/etcd/ca.crt"  --cert="/etc/kubernetes/pki/etcd/server.crt" --key="/etc/kubernetes/pki/etcd/server.key" endpoint status  --write-out=table

+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+
|    ENDPOINT    |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |
+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+
| 127.0.0.1:2379 | c22785f83a00f446 |   3.4.3 |  5.0 MB |      true |      false |         2 |      37052 |              37052 |        |
+----------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+
#


Checking the ETCD Prefix
ETCDCTL_API=3 etcdctl --cacert="/etc/kubernetes/pki/etcd/ca.crt"  --cert="/etc/kubernetes/pki/etcd/server.crt" --key="/etc/kubernetes/pki/e


################################### 03 KubeApi #################################

1052  cd 03-KubeApi/
 1053  ls
 1054  kubectl get pods -n kube-system 
 1055  kubectl get pods -n kube-system | grep -i apiserver
 1056  vim README.md 
 1057  ls
 1058  kubectl cluster-info
 1059  kubectl version 
 1060  kubectl api-versions
 1061  kubectl api-resources
 1062  kubectl run mypythonwebapp --image=amitvashist7/mypywebapp:v3 --port=8081 --dry-run 
 1063  kubectl  get pods 
 1064  kubectl run mypythonwebapp --image=amitvashist7/mypywebapp:v3 --port=8081 --dry-run 
 1065  kubectl run mypythonwebapp --image=amitvashist7/mypywebapp:v3 --port=8081 --dry-run -o yaml
 1066  kubectl run mypythonwebapp --image=amitvashist7/mypywebapp:v3 --port=8081 --dry-run -o yaml > Pod.yaml
 1067  ls
 1068  kubectl get pods 
 1069  vim Pod.yaml 
 1070  kubectl apply -f Pod.yaml 
 1071  kubectl  get pods 
 1072  kubectl api-resources
 1073  ls
 1074  cp -rf Pod.yaml Job.yaml
 1075  vim Job.yaml 
 1076  kubectl apply -f Job.yaml 
 1077  vim Job.yaml 
 1078  kubectl api-resources
 1079  kubectl  get pods 
 1080  kubectl  get po
 1081  ls
 1082  kubectl proxy --address='172.31.0.100' --port=8080 --accept-hosts='.' --accept-paths='.' &
 1083  kubectl get pods 
 1084  kubectl describe pods mypythonwebapp
 1085  ls
 1086  kubectl get pods 
 1087  kubectl config get-clusters 
 1088  kubectl config view
 1089  ls
 1090  vim /etc/kubernetes/admin.conf 
 1091  cd 
 1092  ls
 1093  pwd
 1094  ls -a 
 1095  cd .config/
 1096  ls
 1097  cd ..
 1098  ls
 1099  cd .kube/
 1100  ls
 1101  vim config 
 1102  ls
 1103  cd ..
 1104  ls
 1105  cd docker-kubernetes-ericsson-29-Nov-2021/
 1106  ls
 1107  cd 02-K8s/
 1108  ls
 1109  cd 03-KubeApi/
 1110  ls
 1111  history > README.md 

################################### 04-Replicas-Cantroller ##########################

2005  mkdir 04-Replicas-Cantroller
 2006  ls
 2007  cd 04-Replicas-Cantroller/
 2008  ls
 2009  vim helloworld-cantroller.yaml
 2010  ls
 2011  kubectl apply -f helloworld-cantroller.yaml
 2012  kubectl  get nodes
 2013  kubectl  get pods
 2014  kubectl  get rc
 2015  kubectl  describe  rc
 2016  kubectl  get rc
 2017  kubectl scale --replicas=1 rc helloworld-cantroller
 2018  kubectl scale --replicas=1 rc helloworld-controller
 2019  kubectl  get pods
 2020  kubectl  describe  rc
 2021  kubectl  get pods -o wide --show-labels
 2022  ls
 2023  kubectl scale --replicas=5 rc helloworld-controller
 2024  kubectl get pods
 2025  kubectl  delete pod helloworld-controller-br8t2 helloworld-controller-snjbw helloworld-controller-x26xh
 2026  ls
 2027  kubectl delete -f helloworld-cantroller.yaml
 2028  kubectl  delete pod/hello-k8s pod/mypythonwebapp

################################## 05-Deployments ##################################

 35  kubectl apply -f helloworld.yaml 
  36  kubectl  get deploy,rs,pod
  37  kubectl get pods 
  38  kubectl  get svc 
  39  kubectl  get deploy
      kubectl expose deploy helloworld-deployment --type=NodePort 
  40  cat README.md 
  41  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:2
  42  kubectl  get deploy 
  43  kubectl  get deploy,rs,pod
  44  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:3
  45  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:4
  46  cat helloworld.yaml 
  47  cat README.md 
  48  kubectl rollout history deploy helloworld-deployment
  49  kubectl rollout history deploy helloworld-deployment --revision=1
  50  kubectl rollout history deploy helloworld-deployment --revision=2
  51  kubectl rollout history deploy helloworld-deployment
  52  kubectl rollout undo deploy helloworld-deployment
  53  kubectl rollout history deploy helloworld-deployment
  54  kubectl rollout undo deploy helloworld-deployment
  55  kubectl rollout history deploy helloworld-deployment
  56  kubectl rollout undo deploy helloworld-deployment --to-revision=2
  57  kubectl rollout history deploy helloworld-deployment
  58  kubectl rollout undo deploy helloworld-deployment --to-revision=1
  59  kubectl rollout history deploy helloworld-deployment
  60  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:4 --record 
  61  kubectl rollout history deploy helloworld-deployment
  62  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:3 --record 
  63  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:2 --record 
  64  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web --record 
  65  kubectl rollout history deploy helloworld-deployment
      kubectl edit deploy helloworld-deployment
      kubectl get deploy helloworld-deployment -o yaml > abc.yaml    
   66  ls
   67  kubectl get deployment 
   68  kubectl get deploy helloworld-deployment
   69  kubectl describe deploy helloworld-deployment
   70  kubectl get deploy 
   71  vim helloworld.yaml 
   72  kubectl apply -f helloworld.yaml 
   73  kubectl scale --replicas=7 deploy helloworld-deployment
   74  kubectl  edit deploy helloworld-deployment
   75  kubectl  get deploy 
   76  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:2 --record 
   77  kubectl delete -f helloworld.yaml 
   78  ls
   79  vim helloworld-v2.yaml 
   80  kubectl  apply -f helloworld-v2.yaml 
   81  kubectl set image deployment helloworld-deployment k8s-demo=amitvashist7/k8s-tiny-web:2 --record 
   82  kubectl  get deploy 
   83  kubectl set image deployment helloworld-2-deployment k8s-demo=amitvashist7/k8s-tiny-web:2 --record 
   84  cat helloworld-v2.yaml 
   85  kubectl  get deploy 
   86  kubectl  describe deploy helloworld-2-deployment 
   87  kubectl  delete -f helloworld-v2.yaml 
   88  vim helloworld-v3.yaml 
   89  kubectl apply -f helloworld-v3.yaml 
   90  kubectl set image deployment helloworld-3-deployment k8s-demo=amitvashist7/k8s-tiny-web:2 --record 
   91  kubectl delete -f helloworld-v3.yaml 


##################################### 06-Service #######################

128  cd 06-Service/

  129  ls
  130  cat helloworld.yaml 
  131  vim helloworld.yaml 
  132  kubectl  apply -f helloworld.yaml 
  133  kubectl  get deploy 
  134  kubectl  get svc 
  135  kubectl  delete svc helloworld-deployment
  136  ls
  137  kubectl  get deploy 
  138  kubectl  get pods 
  139  kubectl  expose deploy helloworld-deployment
  140  kubectl  get svc 
  141  curl 10.107.52.235
  142  kubectl edit svc helloworld-deployment
  143  kubectl  get svc 
  144  kubectl describe svc helloworld-deployment
  145  kubectl  get pods -o wide --show-labels
  146  kubectl describe svc helloworld-deployment
  147  kubectl  get pods --show-labels
  148  kubectl describe svc helloworld-deployment
  149  ls
  150  kubectl  get svc 
  151  kubectl  delete svc helloworld-deployment
  152  ls
  153  vim helloworld-svc.yaml
  154  kubectl  apply -f helloworld-svc.yaml 
  155  kubectl  get svc 
  156  kubectl describe svc helloworld-service
  157  ls
  158  cat app-svc-deployment.yaml 
  159  kubectl  apply -f app-svc-deployment.yaml 
  160  vim app-svc-deployment.yaml
  161  kubectl  apply -f app-svc-deployment.yaml 
  162  kubectl  get deploy,svc,pods 
  163  kubectl  get pods 
  164  kubectl  get deploy,svc,pods 
  165  kubectl  describe svc python-webapp-svc
  166  kubectl  get pods -o wide 
  167  kubectl  describe svc python-webapp-svc
  168  kubectl exec -it python-webapp-deployment-54b95bd8d-xgsdm -- sh 
  169  kubectl exec -it python-webapp-deployment-54b95bd8d-xgsdm 
  170  kubectl exec -it python-webapp-deployment-54b95bd8d-xgsdm -- cat app.py 
  171  kubectl logs  python-webapp-deployment-54b95bd8d-xgsdm
  172  vim /etc/hosts

##################################### 07-Labels #################################

  1  ls
    2  kubectl get nodes 
    3  kubectl get nodes --show-labels
    4  ls
    5  vim helloworld-nodeselector.yaml
    6  ls
    7  kubectl get deploy 
    8  kubectl create -f helloworld-nodeselector.yaml 
    9  kubectl get pods 
   10  kubectl describe pod helloworld-deployment-57986b947d-7p2nx
   11  kubectl get nodes
   12  kubectl label nodes worker2 hardware=virtual
   13  kubectl get nodes --show-labels
   14  kubectl get pods 
   15  kubectl get pods -o wide 
   16  kubectl label nodes worker1 hardware=virtual
   17  kubectl get pods -o wide 
   18  kubectl get nodes --show-labels
   19  kubectl get pods -o wide 
   20  kubectl scale --replicas=6 deploy helloworld-deployment
   21* kubectl get po
   22  ls
   23  kubectl scale --replicas=3 deploy helloworld-deployment
   24  ls
   25  vim helloworld-nodeselector-multi.yaml 
   26  kubectl create -f helloworld-nodeselector-multi.yaml 
   27  kubectl get pods 
   28  kubectl describe pod helloworld-deployment-2-7fd7bbcd7-86jfs
   29  kubectl label nodes worker1 env=prod
   30  kubectl get pods 
   31  kubectl get pods -o wide 
   32  kubectl get nodes --show-labels
   33  kubectl get pods -o wide 
   34  kubectl label nodes worker1 env-
   35  kubectl label nodes worker1 hardware-
   36  kubectl get nodes --show-labels
   37  kubectl get pods -o wide 
   38  kubectl label nodes worker1 hardware=virtual
   39  kubectl get nodes --show-labels
   40  kubectl label nodes worker2 hardware-
   41  kubectl get nodes --show-labels
   42  kubectl get pods -o wide 
   43  kubectl scale --replicas=5 deploy helloworld-deployment
   44  kubectl get pods -o wide 
   45  ls
   46  kubectl label nodes worker1 hardware-
   47  kubectl label nodes worker1 env-
   48  kubectl label nodes worker2 env-
   49  kubectl get pods

##################################### 08-Namespaces #################################

   1  ls
    2  kubectl get ns 
    3  cd 14-Namespaces/
    4  kubectl create ns myspace
    5  kubectl get ns 
    6  kubectl delete ns myspace
    7  kubectl get ns 
    8  kubectl create ns myspace -o yaml --dry-run > namespace-defination.yaml
    9  ls
   10  cat namespace-defination.yaml 
   11  ls
   12  cp -rf ../05-Deployments/helloworld.yaml 
   13  cp -rf ../05-Deployments/helloworld.yaml .
   14  ls
   15  cat helloworld.yaml 
   16  cp -rf helloworld.yaml helloworld-with-myspace.yaml 
   17  ls
   18  rm -rf helloworld-with-myspace.yaml 
   19  ls
   20  kubectl create -f helloworld.yaml 
   21  kubectl get pods 
   22  kubectl get ns 
   23  kubectl create -f namespace-defination.yaml 
   24  kubectl create -f helloworld.yaml -n myspace
   25  kubectl get deployment 
   26  kubectl get deployment -n myspace
   27  kubectl describe deployment helloworld-deployment -n myspace
   28  kubectl describe deployment helloworld-deployment 
   29  kubectl delete deployment helloworld-deployment -n myspace
   30  kubectl delete deployment helloworld-deployment 
   31  ls
   32  kubectl get deploy --all-namespaces
   33  ls
   34  kubectl create -f helloworld.yaml -n myspace -o yaml --dry=run
   35  kubectl create -f helloworld.yaml -n myspace -o yaml --dry-run
   36  kubectl create -f helloworld.yaml -n myspace -o yaml --dry-run >  helloworld-with-ns.yaml
   37  ls
   38  cd ..
   39  ls
   40  kubectl create -f 14-Namespaces/
   41  kubectl get deploy --all-namespaces
   42  ls
   43  kubectl delete -f 14-Namespaces/
   44  git add . ; git commit -m "14-Namespaces"; git push 
   45  ls
   46  cd 14-Namespaces/
   47  ls

##################################### 09-Taint-and-Toleration #################################

Taint & Tolerations
Taint the nodes ( worker02 )
kubectl taint nodes worker02 app=myapp:NoSchedule

kubectl describe nodes worker02 | grep -i taint
Untaint the nodes
kubectl taint nodes worker02 myapp-

 990  cd 18-Taint-and-Toleration/
  991  ls
  992  cat helloworld.yaml
  993  ls
  994  cp -rf ../05-Deployments/helloworld.yaml .
  995  ls
  996  kubectl apply -f helloworld.yaml
  997  kubectl  get pods
  998  kubectl  get pods -o wide
  999  ls
 1000  kubectl  get pods -o wide
 1001  kubectl  get nodes
 1002  kubectl taint node worker2 app=myapp:NoSchedule
 1003  kubectl  describe node worker2 | grep -i taint
 1004  kubectl  get pods
 1005  kubectl  get pods -o wide
 1006  kubectl scale --replicas=10 deploy helloworld-deployment
 1007  kubectl  get pods -o wide
 1008  kubectl scale --replicas=1 deploy helloworld-deployment
 1009  kubectl  get pods -o wide
 1010  kubectl scale --replicas=5 deploy helloworld-deployment
 1011  kubectl  get pods -o wide
 1012  ls
 1013  kubectl  get pods
 1014  kubectl  get pods -o wide
 1015  kubectl scale --replicas=3 deploy helloworld-deployment
 1016  ls
 1017  mv helloworld.yaml 01-helloworld.yaml
 1018  mv helloworld-toleration.yaml 02-helloworld-toleration.yaml
 1019  ls -ltr
 1020  vim 02-helloworld-toleration.yaml
 1021  ls
 1022  kubectl delete -f 01-helloworld.yaml
 1023  kubectl apply -f 02-helloworld-toleration.yaml
 1024  kubectl  get pods -o wide
 1025  cat 01-helloworld.yaml
 1026  cat 02-helloworld-toleration.yaml
 1027  ls
 1028  mv helloworld-toleration-2.yaml 03-helloworld-toleration-2.yaml
 1029  vim 03-helloworld-toleration-2.yaml
 1030  ls
 1031  kubectl  delete -f 02-helloworld-toleration.yaml
 1032  ls
 1033  kubectl  delete -f helloworld-ds.yaml
 1034  ls
 1035  kubectl  get pods
 1036  ls
 1037  cat 03-helloworld-toleration-2.yaml
 1038  kubectl taint node worker2 app=example:NoSchedule
 1039  kubectl taint node worker2 example=amit:NoSchedule
 1040  kubectl describe nodes | grep -i taint
 1041  kubectl describe nodes worker2 | grep -i taint
 1042  kubectl describe nodes worker2 | grep -A10 taint
 1043  kubectl describe nodes worker2 | grep -A 10 taint
 1044  kubectl describe nodes worker2 | grep -iA10 taint
 1045  ls
 1046  kubectl  apply -f 02-helloworld-toleration.yaml
 1047  kubectl  get pods -o wide
 1048  kubectl describe nodes worker2 | grep -iA5 taint
 1049  vim 03-helloworld-toleration-2.yaml
 1050  ls
 1051  kubectl  apply -f 03-helloworld-toleration-2.yaml
 1052  kubectl  get pods
 1053  kubectl  get pods -o wide
 1054  ls
 1055  mv helloworld-toleration-3.yaml 04-helloworld-toleration-3.yaml
 1056  vim 04-helloworld-toleration-3.yaml
 1057  ls
 1058  kubectl  apply -f 04-helloworld-toleration-3.yaml
 1059  kubectl  get pods
 1060  kubectl  get pods -o wide
 1061  ls
 1062  cat 04-helloworld-toleration-3.yaml
 1063  kubectl taint node worker1 example2=example2-key:NoExecute
 1064  ls
 1065  mv helloworld-ds.yaml 05-helloworld-ds.yaml
 1066  cat 05-helloworld-ds.yaml
 1067  kubectl  describe node master | grep -i taint
 1068  kubectl  apply -f 05-helloworld-ds.yaml
 1069  kubectl  describe node | grep -i taint
 1070  kubectl taint node worker2 app-
 1071  kubectl taint node worker1 example2-
 1072  kubectl  describe node | grep -i taint
 1073  kubectl taint node worker2 example-
 1074  ls
 1075  cd ..
 1076  kubectl  delete -f 18-Taint-and-Toleration/


##################################### 10-Affinity #################################

1665  cd 23-Affinity/
 1666  ls
 1667  cat helloworld.yaml
 1668  ls
 1669  kubectl  apply -f helloworld.yaml
 1670  kubectl  get pods
 1671  kubectl  describe pod helloworld-deployment-b64578fb-fk294
 1672  ls
 1673  kubectl  get nodes
 1674  kubectl  label node worker1 env=prod
 1675  kubectl  get pods
 1676  kubectl  get pods -o wide
 1677  kubectl  label node worker2 env=dev
 1678  kubectl get nodes --show-labels
 1679  kubectl  get pods -o wide
 1680  kubectl scale --replicas=5 deploy helloworld-deployment
 1681  kubectl  get pods -o wide
 1682  kubectl scale --replicas=1 deploy helloworld-deployment
 1683  kubectl  get pods -o wide
 1684  ls
 1685  sdiff helloworld.yaml helloworld-dev-prod.yaml
 1686  kubectl  delete -f helloworld.yaml
 1687  ls
 1688  kubectl  get deploy
 1689  kubectl  apply -f helloworld-dev-prod.yaml
 1690  kubectl  get pods -o wide
 1691  ls
 1692  vim helloworld-multi-affinity.yaml
 1693  ls
 1694  kubectl  delete -f helloworld-dev-prod.yaml
 1695  ls
 1696  kubectl get nodes --show-labels
 1697  vim helloworld-multi-affinity.yaml
 1698  ls
 1699  kubectl  apply -f helloworld-multi-affinity.yaml
 1700  kubectl get pods
 1701  kubectl get pods -o wide
 1702  kubectl delete  -f helloworld-multi-affinity.yaml
 1703  kubectl get nodes --show-labels
 1704  kubectl label node worker1 env-
 1705  kubectl label node worker1 env=dev
 1706  kubectl get nodes --show-labels
 1707  kubectl  apply -f helloworld-multi-affinity.yaml
 1708  kubectl  get pods -o wide
 1709  kubectl delete  -f helloworld-multi-affinity.yaml
 1710  ls
 1711  cat helloworld-multi-affinity.yaml
 1712  kubectl label node worker1 team=engineering-project1
 1713  kubectl  apply -f helloworld-multi-affinity.yaml
 1714  kubectl  get pods -o wide
 1715  kubectl scale --replicas=10 deploy helloworld-deployment
 1716  kubectl  get pods -o wide
 1717  kubectl scale --replicas=20 deploy helloworld-deployment
 1718  kubectl  get pods -o wide
 1719  kubectl scale --replicas=2 deploy helloworld-deployment
 1720  kubectl  get pods -o wide


################################## 11-Taint-and-toleration-with-affinity #########################

1281  cd 10-Taint-and-toleration-with-affinity/
 1282  ls
 1283  mv helloworld-affinity.yaml 01-helloworld-affinity.yaml
 1284  ls
 1285  mv helloworld-affinity-with-tolerations.yaml 02-helloworld-affinity-with-tolerations.yaml
 1286  ls
 1287  vim 01-helloworld-affinity.yaml
 1288  ls
 1289  kubectl  apply -f 01-helloworld-affinity.yaml
 1290  kubectl  get pods
 1291  kubectl  get pods -o wide
 1292  ls
 1293  kubectl  get pods
 1294  kubectl  get pods -o wide
 1295  ls
 1296  cd ..
 1297  ls
 1298  cd 10-Taint-and-toleration-with-affinity/
 1299  ls
 1300  cp -rf 01-helloworld-affinity.yaml 00-helloworld.yaml
 1301  ls
 1302  vim 00-helloworld.yaml
 1303  ls
 1304  kubectl  apply -f 00-helloworld.yaml
 1305  kubectl get pods -o wide
 1306  kubectl  delete -f ../10-Taint-and-toleration-with-affinity/
 1307  kubectl get pods -o wide
 1308  ls
 1309  kubectl taint nodes worker2 app=myapp:NoSchedule
 1310  ls
 1311  kubectl  apply -f 00-helloworld.yaml
 1312  kubectl  apply -f 01-helloworld-affinity.yaml
 1313  kubectl get pods -o wide
 1314  kubectl  delete -f 01-helloworld-affinity.yaml
 1315  ls
 1316  vim 02-helloworld-affinity-with-tolerations.yaml
 1317  ls
 1318  kubectl apply -f 02-helloworld-affinity-with-tolerations.yaml
 1319  kubectl get pods -o wide
 1320  ls
 1321  cd ..
 1322  ls
 1323  kubectl  delete -f 10-Taint-and-toleration-with-affinity/
 1324  ls
 1325  cd ..
 1326  ls
 1327  git add . ; git commit -m "10-Taint-and-toleration-with-affinity"; git push

###################################### 12-Pod-Affinity-and-Anti-Affinity #####################

 656  vim 12-Pod-Affinity-and-Anti-Affinity/helloworld.yaml
  657  kubectl  apply -f 12-Pod-Affinity-and-Anti-Affinity/helloworld.yaml
  658  kubectl get pods -o wide
  659  kubectl describe node  | grep -i taint
  660  kubectl taint nodes worker2 app-
  661  kubectl describe node  | grep -i taint
  662  kubectl get pods -o wide
  663  kubectl  delete  -f 12-Pod-Affinity-and-Anti-Affinity/helloworld.yaml

##################################### 13-Secrets #######################################

 1  kubectl get secrets 
    2  cat /root/username.txt 
    3  cat /root/password.txt 
    4  kubectl create secret generic mysecrets --from-file=/root/username.txt --from-file=/root/password.txt
    5  kubectl get secrets 
    6  kubectl describe secrets mysecrets
    7  kubectl edit secrets mysecrets
    8  ls
    9  mkdir 09-Secrets 
   10  cd 09-Secrets/
   11  ls
   12  vim helloworld-secrets-volumes.yaml
   13  ls
   14  kubectl create -f helloworld-secrets-volumes.yaml 
   15  kubectl get deploy 
   16  kubectl get pods 
   17  kubectl describe pods helloworld-deployment-f6c47d6c5-fgt6v
   18  ls
   19  kubectl get pods
   20  kubectl exec -it helloworld-deployment-f6c47d6c5-fgt6v -- bash
   21  ls
   22  vi /etc/hosts
   23  kubectl exec -it helloworld-deployment-f6c47d6c5-fgt6v -- bash
   24  kubectl exec -it helloworld-deployment-f6c47d6c5-fgt6v -- /bin/bash
   25  kubectl get pods 
   26  kubectl get pods -o wide 
   27  kubectl exec -it helloworld-deployment-f6c47d6c5-h9thr -- /bin/sh
   28  cat /etc/hosts
   29  ping worker01
   30  ping worker02
   31  ls
   32  kubectl exec -it helloworld-deployment-f6c47d6c5-h9thr -- /bin/sh
   33  ls
   34  kubectl delete -f helloworld-secrets-volumes.yaml 
   35  vim helloworld-secrets.yaml
   36  echo -n "paypal" | base64
   37  echo -n "paypal@432!" | base64
   38  vim helloworld-secrets.yaml 
   39  ls
   40  vim helloworld-secrets-volumes.yaml 
   41  ls
   42  cd ..
   43  ls
   44  kubectl create -f 09-Secrets/
   45  kubectl get pods 
   46  kubectl exec -it helloworld-deployment-64968b454c-gcdvq -- /bin/sh
   47  ls
   48  cd 09-Secrets/
   49  ls
   50  history 

################################# 14-Wordpress-Multi-Container-Pod ########################

Docker login
docker login
ls /root/.docker/config.js
Create a Secret in K8s for Docker Registry
kubectl create secret generic regcred --from-file=.dockerconfigjson=/root/.docker/config.json --type=kubernetes.io/dockerconfigjson

kubectl get secrets

 58  cd 10-Wordpress-Multi-Container-Pod/
   67  ls
   68  cat wordpress-secrets.yml
   69  ls
   70  cat wordpress-service.yml
   71  ls
   72  vim wordpress-deployment.yml
   73  ls
   74  cd ..
   75  ls
   76  kubectl create -f 10-Wordpress-Multi-Container-Pod/
   77  kubectl get svc,deploy,secrets,pod
   78  kubectl get pod
   79  kubectl describe pod wordpress-deployment-7d4896594c-kcqzf
   80  kubectl get pod
   81  kubectl describe pod wordpress-deployment-7d4896594c-kcqzf
   82  kubectl get svc
   83  kubectl get pod
   84  kubectl exec -it wordpress-deployment-7d4896594c-kcqzf -c mysql -- mysql -u root -p
  
# Database Commands: 
```
> show databases; 
> use wordpress; 
> show tables; 
> select * from tablename; 
> exit

################################### 15-User-Management ########################

Kubernetes User Accounts - Demo

Create a new normal user
apt install openssl -y 
openssl genrsa -out amit.pem 2048
cat amit.pem 
openssl  req -new -key amit.pem -out amit-csr.pem -subj "/CN=amit/O=training"
   
cat amit-csr.pem 
openssl x509 -req -in amit-csr.pem -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out amit.crt -days 10000
openssl x509 -in amit.crt -text -noout


Set the credentials in kube config
kubectl config view
kubectl config set-credentials amit --client-certificate=/root/amit.crt --client-key=/root/amit.pem 
kubectl config view

kubectl config get-contexts
kubectl config set-context amit@kubernetes --cluster=kubernetes --user=amit


Check the Credentials
kubectl config view
kubectl config get-contexts


Create a new context in kube config
kubectl config use-context amit@kubernetes
kubectl config get-contexts


New let's try to run couple of commands ( if you are getting Forebiden error don't worry its because of missing RBAC roles of the newly created user )
kubectl get pods 


Switch back to the old context for regular opperations.
kubectl config use-context kubernetes-admin@kubernetes
kubectl get pods 


############################# 16-RBAC ################################

Kubernetes RBAC

Create a Pod Reader Role
kubectl create role pod-reader --verb=get,list,watch --resource=pods --dry-run -o yaml > pod-reader-role.yaml
cat pod-reader-role.yaml
kubectl create -f pod-reader-role.yaml


Create a POD Reader RoleBinding
kubectl create rolebinding --help
kubectl create rolebinding read-pod-binding --role=pod-reader --user=amit --dry-run -o yaml > read-pod-binding.yaml
kubectl create -f read-pod-binding.yaml


Check the Roles & Context with role Permissions:
kubectl get role
kubectl get rolebinding

kubectl config get-contexts
kubectl config use-context amit@kubernetes
kubectl config get-contexts

kubectl get pods
kubectl get pods -n kube-system


Create a ClutserRole Binding with Cluster Admin role for normal user: amit
View Cluster & Binding via kubernetes-admin context
kubectl config get-contexts
kubectl config use-context kubernetes-admin@kubernetes
kubectl config get-contexts
kubectl get pods -n kube-system

kubectl get clusterrole
kubectl describe clusterrole cluster-admin
kubectl get clusterrolebinding
kubectl describe clusterrolebinding cluster-admin


Create a Clusterole binding with existing cluster admin role
kubectl create clusterrolebinding admin-user-amit --clusterrole=cluster-admin --user=amit  --dry-run
kubectl create clusterrolebinding admin-user-amit --clusterrole=cluster-admin --user=amit  --dry-run -o yaml > amit-cluster-rolebinding.yaml
cat amit-cluster-rolebinding.yaml

kubectl create -f amit-cluster-rolebinding.yaml
kubectl get clusterrolebinding
kubectl describe clusterrolebinding admin-user-amit


Change the conetext & validate the role permissions
kubectl config get-contexts
kubectl config use-context amit@kubernetes
kubectl get pods
kubectl get pods --all-namespaces
kubectl auth can-i delete pod -n kube-system
kubectl auth can-i create pod -n kube-system
kubectl auth can-i create pod


#################################### 17-Volumes ###############################

Setting up NFS Server for K8s PV Demo.

Install Nfs Server
apt-get install nfs-kernel-server -y 
mkdir /exports
chown nobody:nogroup /exports

NFS Export Path & Share Config

root@kube-master:~/k8s-paypal-28-Dec-2020/26-Volumes-NFS# grep -i exports /etc/exports
/exports  *(rw,sync,no_subtree_check)
root@kube-master:~/k8s-paypal-28-Dec-2020/26-Volumes-NFS#

Restart the NFS Server Service
systemctl restart nfs-kernel-server
systemctl status  nfs-kernel-server

Vertify the NFS Share
showmount -e localhost 


On Clinet / Worker Nodes
Install NFS Clinet Utils
apt-get install nfs-common -y
mount -t nfs 172.31.0.100:/exports /mnt/
cd /mnt/
hostname >> hostname.txt

660  git pull 

  661  ls
  662  cd
  663  apt-get install nfs-kernel-server -y 
  664  mkdir /exports
  665  chown nobody:nogroup /exports
  666  kubectl get nodes 
  667  vim /etc/exports 
  668  systemctl restart nfs-kernel-server
  669  systemctl status  nfs-kernel-server
  670  showmount -e localhost 
  671  cd /exports/
  672  ls
  673  cat hello.txt 
  674  cd 
  675  ls
  680  cd 14-Volumes-NFS/
  681  ls
  682  vim pv-nfs.yaml 
  683  ls
  684  kubectl get pv 
  685  kubectl apply -f pv-nfs.yaml
  686  kubectl get pv 
  687  vim pvc-nfs.yaml 
  688  kubectl get pvc 
  689  kubectl apply -f pvc-nfs.yaml 
  690  kubectl get pvc 
  691  kubectl get pv
  692  ls
  693  vim nfs-busybox-rc.yaml 
  694  kubectl apply -f nfs-busybox-rc.yaml 
  695  kubectl get pods 
  696  kubectl describe pod nfs-busybox-2-74l7c
  697  ls
  698  kubectl get pods -o wide 
  699  tail -f  /exports/index.html 
  700  ls
  701  vim web-rc-pvc.yaml 
  702  kubectl apply -f web-rc-pvc.yaml 
  703  ls
  704  cat nfs-web-svc.yaml 
  705  kubectl apply -f nfs-web-svc.yaml 
  706  kubectl get svc 
  707  kubectl delete svc default-subdomain helloworld-nginx-service myweb
  708  kubectl get svc 
  709  kubectl edit svc nfs-web
  710  kubectl get svc 
  711  > /exports/index.html 
  712  kubectl get pods 
  713  kubectl delete pod nfs-busybox-2-74l7c nfs-busybox-2-vxkdn nfs-busybox-2-zkcxz
  714  kubectl get pods 
  715  kubectl get deploy 
  716  ls
  717  kubectl delete -f nfs-busybox-rc.yaml
  718  kubectl get deploy 
  719  kubectl get pods 
  720  ls
  721  cd ..
  722  ls
  723  kubectl delete -f 14-Volumes-NFS/
  724  ls
  725  cd 14-Volumes-NFS/
  726  ls
  727  history 


################################## 18-Ingress #######################################

Ingress Cantroller required the following clusterroles bindings to be applied.
kubectl create clusterrolebinding add-on-cluster-admin   --clusterrole=cluster-admin   --serviceaccount=kube-system:default
kubectl create clusterrolebinding add-on-cluster-admin-1   --clusterrole=cluster-admin   --serviceaccount=default:default


1854  ls
 1855  cd 27-Ingress/
 1856  ls
 1857  kubectl apply -f nginx-ingress-controller.yaml
 1858  kubectl apply -f echoservice.yml
 1859  kubectl  get pods,svc
 1860  ls
 1861  cat README.md
 1862  kubectl create clusterrolebinding add-on-cluster-admin   --clusterrole=cluster-admin   --serviceaccount=kube-system:default
 1863  kubectl create clusterrolebinding add-on-cluster-admin-1   --clusterrole=cluster-admin   --serviceaccount=default:default
 1864  kubectl  get pods,svc
 1865  kubectl log pod/nginx-ingress-controller-7s67s
 1866  kubectl logs pod/nginx-ingress-controller-7s67s
 1867  kubectl  get pods
 1868  kubectl get svc
 1869  kubectl get pods
 1870  kubectl get rc
 1871  kubectl expose rc nginx-ingress-controller --type=NodePort
 1872  kubectl get svc
 1873  kubectl  get pods
 1874  kubectl  get pods -o wide
 1875  curl 172.31.0.101:30854
 1876  cat nginx-ingress-controller.yaml
 1877  ls
 1878  vim helloworld-v1.yml
 1879  kubectl  apply -f helloworld-v1.yml
 1880  ls
 1881  cat helloworld-v2.yml
 1882  cat helloworld-v1.yml
 1883  cat helloworld-v2.yml
 1884  ls
 1885  cat helloworld-v2.yml
 1886  ls
 1887  kubectl  apply -f helloworld-v2.yml
 1888  ls
 1889  kubectl  get svc
 1890  kubectl get pods -o wide
 1891  kubectl get svc
 1892  kubectl describe svc helloworld-v2
 1893  vim helloworld-v2.yml
 1894  ls
 1895  kubectl  get svc
 1896  curl 172.31.0.101:30854
 1897  curl 172.31.0.101:30854 -H 'Host: helloworld-v1.example.com'
 1898  curl 172.31.0.101:30854 -H 'Host: helloworld-v2.example.com'
 1899  curl 172.31.0.101:30854
 1900  curl 172.31.0.101:30854 -H 'Host: helloworld-v1.example.com'
 1901  curl 172.31.0.101:30854 -H 'Host: helloworld-v2.example.com'
 1902  curl 172.31.0.101:30854 -H 'Host: helloworld-v1.example.com'
 1903  curl 172.31.0.101:30854 -H 'Host: helloworld-v2.example.com'
 1904  curl 172.31.0.101:32749/info -H 'Host: python'
 1905  ls
 1906  cd ..
 1907  ls
 1908  cd ..
 1909  ls
 1910  git add . ; git commit -m "27-Ingress"; git push
 1911  history